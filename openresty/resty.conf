
lua_package_path "/Users/crystal/codes/lua/luaUsing/openresty/?.lua;/Users/crystal/codes/lua/luaUsing/?.lua;;";

server{
    listen 6699;
    location / {
        default_type text/html;

        content_by_lua_block {
            ngx.say("hello world")
        }

        # diy log
        log_by_lua_block {
           local logger = require "resty.socket"
           if not logger.initted() then
                local ok, err = logger.init{
                    host = '127.0.0.1',
                    port = 1234,
                    flush_limit = 1234,
                    drop_limit = 5678,
                }
                if not ok then
                    ngx.log(ngx.ERR, "failed to initialize the logger: ",
                        err)
                    return
                end
           end

           local bytes, err = logger.log(msg)
            if err then
                ngx.log(ngx.ERR, "failed to log message: ", err)
                return
            end
       }
    }

    location  = /sum {
        internal;

        content_by_lua_block {
            local args = ngx.req.get_uri_args()
            ngx.say(tonumber(args.a) + tonumber(args.b))
        }
    }

    location = /app/test {
        content_by_lua_block {
            local res = ngx.location.capture(
                "/sum", {args={a=3, b=8}}
            )
            ngx.say("status:", res.status, "response:", res.body)
        }
    }

    # param
    location /print_param {
        content_by_lua_block{
            local arg  = ngx.req.get_uri_args()
            for k,v in pairs(arg) do
                ngx.say("[GET ] key:", k, " v:", v)
            end

            ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body
            local arg = ngx.req.get_post_args()
            for k,v in pairs(arg) do 
                ngx.say("[POST ] key:", k, " v:", v)
            end

        }
    }

    # req
     location /test_req {
       content_by_lua_block {
           local res = ngx.location.capture(
                    '/print_param',
                    {
                       method = ngx.HTTP_POST,
                       args = ngx.encode_args({a = 1, b = '2&'}),
                       body = ngx.encode_args({c = 3, d = '4&'})
                   }
                )
           ngx.say(res.body)
       }
   }

 
   location /test_req2 {
       content_by_lua_block{
           local res = ngx.location.capture('/print_param',
            {
                method = ngx.HTTP_POST,
                -- args = 'a=1&b=2%26',  -- 注意这里的 %26 ,代表的是 & 字符
                -- body = 'c=3&d=4%26'
                args = {a = 1, b = '2&'}, -- args 参数可以接受字符串或Lua 表的
                body = 'c=3&d=4%26'
                }
            )
            ngx.say(res.body)
       }
   }

   # 获取body
   location /test_get_body {
       content_by_lua_block{
           ngx.req.read_body()
           local data = ngx.req.get_body_data()
           ngx.say("hello", data)
       }
   }

   # test log
   # tail -f /usr/local/var/log/nginx/error.log
   location /test_log {
       content_by_lua_block{
            local num = 55
            local str = "string"
            local obj
            ngx.log(ngx.ERR, "num:", num)
            ngx.log(ngx.INFO, " string:", str)
            print([[i am print]])
            ngx.log(ngx.ERR, " object:", obj)
            ngx.say("test_log")
       }
   }

 
   # third module
   location /baidu {
    #    resolver 8.8.8.8;
        resolver 223.5.5.5;

       content_by_lua_block{
           local http = require "resty.http"
            local httpc = http.new()
            local res, err = httpc:request_uri("http://www.baidu.com")
            if not res then
                ngx.say("failed to request:", err)
                return
            end
            if res.status == ngx.HTTP_OK then
                ngx.say(res.body)
            else
                ngx.exit(res.status)
            end
       }
   }


    # nginx
    location /ngx_var{
        default_type 'text/plain';
        content_by_lua_block{
            ngx.say(ngx.var.arg_a)
        }
    }

    location = /request_body {
        client_max_body_size 500k;
        client_body_buffer_size 500k;
        content_by_lua_block{
            ngx.req.read_body()
            local data  = ngx.req.get_body_data()
            if data then
                ngx.say("body data:")
                ngx.print(data)
                -- return
            else
                ngx.say("no body found get_body_data")    
            end

            -- body may get buffered in a temp file 
            local file = ngx.req.get_body_file()
            if file then
                ngx.say("body is in file", file)
            else
                ngx.say("no body found get_body_file")
            end        
        }
    }

    location = /ngxworker {
        content_by_lua_block{
            ngx.say("worker num:", ngx.worker.count())
            ngx.say("worker exit :", ngx.worker.exiting())
            ngx.say("worker pid :", ngx.worker.pid())
            ngx.say("worker id :", ngx.worker.id())
        }
    }











}


